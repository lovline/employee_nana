from  docx import  Document
from  docx.shared import  Pt
from  docx.oxml.ns import  qn
from docx.shared import Inches
import tkinter as tk
import os, time


def create_VT_document(save_path):
    # 打开文档
    document = Document()
    document.styles['Normal'].font.name = u'宋体'
    document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'宋体')
    # 加入不同等级的标题
    document.add_heading('问题单VT 报告', 0)
    document.add_paragraph('注意如下几项：')
    # 增加有序列表
    document.add_paragraph(u'请使用干净的环境进行VT，防止后台有垃圾数据影响VT结果。', style='List Number')
    document.add_paragraph(u'CPCI版本重新安装BAM，打补丁进行VT，这样最保险。', style='List Number')
    document.add_paragraph(u'ATCA版本重新安装网元，打补丁进行VT，这样最保险。', style='List Number')
    document.add_paragraph(u'VT前将数据库还原成之前备份一个比较干净的数据库，再打最新的补丁。', style='List Number')
    # 增加分页
    document.add_page_break()

    document.add_heading(u'二级标题', 1)
    document.add_heading(u'二级标题', 2)
    # 添加文本
    paragraph = document.add_paragraph(u'添加了文本')
    # 设置字号
    run = paragraph.add_run(u'设置字号')
    run.font.size = Pt(24)
    # 设置字体
    run = paragraph.add_run('Set Font,')
    run.font.name = 'Consolas'
    # 设置中文字体
    run = paragraph.add_run(u'设置中文字体，')
    run.font.name = u'宋体'
    r = run._element
    r.rPr.rFonts.set(qn('w:eastAsia'), u'宋体')
    # 设置斜体
    run = paragraph.add_run(u'斜体、')
    run.italic = True
    # 设置粗体
    run = paragraph.add_run(u'粗体').bold = True
    # 增加引用
    document.add_paragraph('Intense quote', style='Intense Quote')

    # 增加无序列表
    document.add_paragraph(u'无序列表元素1', style='List Bullet')
    document.add_paragraph(u'无序列表元素2', style='List Bullet')
    # 增加图片（此处使用相对位置）
    # document.add_picture('jdb.jpg',width=Inches(1.25))
    # 增加表格
    table = document.add_table(rows=3, cols=3)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = "第一列"
    hdr_cells[1].text = "第二列"
    hdr_cells[2].text = "第三列"
    hdr_cells = table.rows[1].cells
    hdr_cells[0].text = '2'
    hdr_cells[1].text = 'aerszvfdgx'
    hdr_cells[2].text = 'abdzfgxfdf'
    hdr_cells = table.rows[2].cells
    hdr_cells[0].text = '3'
    hdr_cells[1].text = 'cafdwvaef'
    hdr_cells[2].text = 'aabs zfgf'

    # 保存文件
    dts_number = 'DTS123123123'
    save_file_name = save_path + '\\' + dts_number + 'VT 报告' + '.docx'
    document.save(save_file_name)


def get_save_path():
    return view_string_question.get()

def start_execute():
    save_path = get_save_path()
    create_VT_document(save_path)
    window.quit()


window = tk.Tk()
window.title('Create VT Document')
window.geometry('800x400')

view_string_question = tk.StringVar()
record_path = r'输入需要创建VT 报告的路径如 -- N:\2019问题归总\监听不触发问题'

tk.Label(window, textvariable='', width='27').pack()
tk.Label(window, textvariable='', width='27').pack()
label = tk.Label(window,
    text=record_path,       # 标签的文字
    bg='gray',                 # 背景颜色
    font=('Arial', 12),         # 字体和字体大小
    width=100, height=2          # 标签长宽
    )
label.pack()    # 固定窗口位置
tk.Label(window, textvariable='', width='27').pack()
tk.Entry(window, textvariable=view_string_question, width=100).pack()
tk.Label(window, textvariable='', width='27').pack()

tk.Label(window, textvariable='', width='27').pack()
tk.Button(window, text="open common program", height='2', width='20', font=('black', 12), command=start_execute,
           bg='#FFFAFA', fg='#4F4F4F', activebackground='white', relief='raised').pack()


window.mainloop()



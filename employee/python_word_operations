from  docx import  Document
from  docx.shared import  Pt
from  docx.oxml.ns import  qn
from docx.shared import Inches
import tkinter as tk
import os, time


def create_VT_document(save_path):
    # 打开文档
    document = Document()
    document.styles['Normal'].font.name = u'宋体'
    document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'宋体')
    # 加入不同等级的标题
    document.add_heading('问题单VT 报告', 0)
    document.add_paragraph('注意如下几项：')
    # 增加有序列表
    document.add_paragraph(u'请使用干净的环境进行VT，防止后台有垃圾数据影响VT结果。', style='List Number')
    document.add_paragraph(u'CPCI版本重新安装BAM，打补丁进行VT，这样最保险。', style='List Number')
    document.add_paragraph(u'ATCA版本重新安装网元，打补丁进行VT，这样最保险。', style='List Number')
    document.add_paragraph(u'VT前将数据库还原成之前备份一个比较干净的数据库，再打最新的补丁。', style='List Number')
    # 增加分页
    # document.add_page_break()
    document.add_heading('补丁信息', level=2)
    # 增加无序列表
    document.add_paragraph(u'LST PATCHVER:;', style='List Bullet')
    document.add_paragraph(u'DSP PATCHVER:;', style='List Bullet')
    document.add_paragraph(u'DSP PATCH:;', style='List Bullet')
    document.add_paragraph(u'DSP INVER:;', style='List Bullet')
    document.add_paragraph(u'DSP BAMPATCH:;', style='List Bullet')
    document.add_paragraph(u'DSP SYSRES:;', style='List Bullet')
    document.add_paragraph('补丁信息文件')

    document.add_heading('测试用例', level=2)
    document.add_paragraph('测试用例文件')

    document.add_heading('VT 验证结果', level=2)
    document.add_paragraph('VT 验证结果文件')

    document.add_heading('checklist项', level=2)
    document.add_heading('热补丁资源检查：不涉及', level=3)
    document.add_paragraph('补丁前后DSP SYSRES，可参考补丁信息文件')
    document.add_heading('热补丁异常打印检测：不涉及', level=3)
    document.add_paragraph('A、DeviceAlarm中搜索“call by”')
    document.add_paragraph('B、DeviceAlarm中搜索“dead”')
    document.add_paragraph('C、DeviceOSlog中搜索“destroy”')
    document.add_heading('涉及BAM后台的修改：不涉及', level=3)
    document.add_paragraph('重复打一次BAM补丁能否成功')
    document.add_heading('检查结果是否和之前验证的结果一致？：一致', level=3)


    # 保存文件
    dts_number = 'DTS123123123'
    save_file_name = save_path + '\\' + dts_number + 'VT 报告' + '.docx'
    document.save(save_file_name)


def get_save_path():
    return view_string_question.get()

def start_execute():
    save_path = get_save_path()
    create_VT_document(save_path)
    window.quit()


window = tk.Tk()
window.title('Create VT Document')
window.geometry('800x400')

view_string_question = tk.StringVar()
record_path = r'输入需要创建VT 报告的路径如 -- N:\2019问题归总\监听不触发问题'

tk.Label(window, textvariable='', width='27').pack()
tk.Label(window, textvariable='', width='27').pack()
label = tk.Label(window,
    text=record_path,       # 标签的文字
    bg='gray',                 # 背景颜色
    font=('Arial', 12),         # 字体和字体大小
    width=100, height=2          # 标签长宽
    )
label.pack()    # 固定窗口位置
tk.Label(window, textvariable='', width='27').pack()
tk.Entry(window, textvariable=view_string_question, width=100).pack()
tk.Label(window, textvariable='', width='27').pack()

tk.Label(window, textvariable='', width='27').pack()
tk.Button(window, text="open common program", height='2', width='20', font=('black', 12), command=start_execute,
           bg='#FFFAFA', fg='#4F4F4F', activebackground='white', relief='raised').pack()


window.mainloop()


